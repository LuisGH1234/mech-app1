# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AuthResult {
  token: String!
}

type Mech {
  createdAt: String
  updatedAt: String
  id: ID!
  voltageStart: Float
  voltageEnd: Float
  power: Float
  weightCapacity: Float
  deliveryTimeStart: Int
  deliveryTimeEnd: Int
  orangeSizeStart: Float
  orangeSizeEnd: Float
  long: Float
  width: Float
  height: Float
  temperatureStart: Int
  temperatureEnd: Int
  user: User
  paymentMethods: [PaymentMethod!]
}

type MechPaginationResult {
  list: [Mech!]!
  count: Int!
}

type Mutation {
  register(user: UserInput!): AuthResult!
}

type PaymentMethod {
  createdAt: String
  updatedAt: String
  id: ID!
  code: String!
  mechs: [Mech!]
  translations: [PaymentMethodTranslation!]!
}

type PaymentMethodTranslation {
  createdAt: String
  updatedAt: String
  id: ID!
  language: String!
  isDefault: Boolean!
  description: String!
  paymentMethod: PaymentMethod!
}

type Query {
  mech(id: ID!): Mech
  mechs(page: Int, limit: Int, filter: String): MechPaginationResult!
  roles(filter: String): [Role!]!
  user(id: ID!): User
  users(page: Int, limit: Int, filter: String): UserPaginationResult!
}

type Role {
  createdAt: String
  updatedAt: String
  id: ID!
  code: String!
  description: String!
  users: [User!]
}

type User {
  createdAt: String
  updatedAt: String
  id: ID!
  firstname: String
  lastname: String
  email: String
  age: Int
  role: Role
  mechs: [Mech!]
}

input UserInput {
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  age: Int
}

type UserPaginationResult {
  list: [User!]!
  count: Int!
}
